@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    if message.content.startswith("//"):
        return
    if message.author.bot:
        if message.author.id != 1273258633622454273:
            return
    with open("./gld", 'r+', encoding="utf-16 be") as gld:
        gld.seek(0)
        gld.truncate(0)
        gld.write(f"{message.guild}".replace("\n", "").strip())
    with open("./msg", 'r+', encoding="utf-16 be") as msg:
        msg.seek(0)
        msg.truncate(0)
        msg.write(f"{message.content}\n".strip())
    with open("./crtr", "r+", encoding="utf-16 be") as c:
        c.seek(0)
        c.truncate(0)
        c.write(f"{message.author.name} ({message.author.id})".strip())
    ids = [1278036944500031620, 1266399542065102912, 1203620814113742849, 910785703040938024, 1272818237754707980]
    with open("channels", "r+") as _channels:
        channels = [thing for thing in _channels.read().splitlines() if thing]
        try:
            channels = [int(thing) for thing in channels]
        except ValueError:
            raise ValueError("invalid channel ID")
        if message.author.bot:
            return
        if message.type != discord.MessageType.default and message.type != discord.MessageType.reply:
            return
        if message.channel.id not in channels:
            if message.author.bot != True:
                if message.content == "/setup":
                    _channels.seek(0, 2)  # Move cursor to end of file
                    _channels.write(f"\n{message.channel.id}")  # Append channel ID
                    channels.append(message.channel.id)
                    channels = list(OrderedDict.fromkeys(channels))  # Remove duplicates
                    await message.channel.send(f"successfully activated YACGCB (channels: {channels}, current channel {message.channel.id})")
                    return
                pass
        if message.channel.id in channels and message.content != "/remove":
            try:
                await message.delete()
            except:
                pass
        if message.content == "/remove":
            if message.channel.id in channels:
                channels.remove(message.channel.id)  # Remove from list
                # Update the file "channels" (no need to overwrite the whole file)
                _channels.seek(0)
                _channels.truncate(0)
                _channels.write('\n'.join(str(channel) for channel in channels))
                await message.channel.send(f"successfully deactivated YACGCB (channels: {channels}, current channel {message.channel.id})")
                return
        if message.channel.id in channels:
            with open('./crtr', encoding="utf-16 be") as author_name_:
                author_name = author_name_.read()
            with open('./gld', encoding="utf-16 be") as guild_name_:
                guild_name = guild_name_.read()
            with open('./msg', encoding="utf-16 be") as message_content_:
                message_content = message_content_.read()
            if len(message_content) >= 1024:
                message_content = message_content[0:1021]+'...'
            main_embed = discord.Embed(title=f'message from {guild_name} by {author_name}'.replace("\n\n", "").replace("\x00", ""), colour=randint(0, 16777216))
            main_embed.add_field(name='message:', value=f"{message_content.replace("\x00", "").replace("\n\n", "\n")}")
            main_embed.set_thumbnail(url="https://orcapet.is-a.dev/icon/favicon.png")
            if str(message.type) == "MessageType.reply" and message.reference != None:
                reply = await message.channel.fetch_message(message.reference.message_id)
                with open("./replycrtr", "r+", encoding="utf-16 be") as rc:
                    rc.seek(0)
                    rc.truncate(0)
                    rc.write(f"{reply.author.name} ({reply.author.id})")
            if message.reference != None:
                reply = await message.channel.fetch_message(message.reference.message_id)
                with open("./replycrtr", encoding="utf-16 be") as rcrtr:
                    replyauthor = rcrtr.read()
                    if len(reply.content) >= 1024:
                        main_reply = reply.embeds[0].fields[0].value[0:1021]+'...'
                    else:
                        main_reply = reply.embeds[0].fields[0].value
                    if len(message_content) >= 1024:
                        message_content = message_content[0:1021]+"..."
                    main_embed.add_field(name=f'***__original message by {replyauthor}:__***', value=f"{main_reply.replace("\x00", "").replace("\n\n", "\n")}")
            if message.author.id not in ids:
                await message.channel.send(embed=main_embed)
                for guild in bot.guilds:
                    for channel in guild.channels:
                        if channel.id in channels and channel != message.channel:
                            does_have_attachments = False
                            if message.attachments != []:
                                does_have_attachments = True
                            if does_have_attachments:
                                main_embed = main_embed.set_image(url=str(message.attachments[0].url))
                            await channel.send(embed=main_embed)
